plugins {
	id 'java'
	id 'org.springframework.boot' version "${springBootVersion}"
	id "io.spring.dependency-management" version "${springDependencyManagementVersion}"
	id "org.openapi.generator" version "7.3.0"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation "org.springframework.boot:spring-boot-starter-json"
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	// OpenAPI-CodeGen-Deps
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
	implementation 'com.google.code.findbugs:jsr305:3.0.2'
	implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
}

tasks.named('test') {
	useJUnitPlatform()
}

sourceSets.main.java.srcDirs += "$rootDir/build/generated-server/src/main/java"

openApiGenerate {
	generatorName = "spring"
	inputSpec = "$rootDir/openapi.yaml".toString()
	outputDir = "$rootDir/build/generated-server"
	apiPackage = "${project.group}.openapi"
	modelPackage = "${project.group}.openapi.models"
	logToStderr = true
	generateAliasAsModel = false

	globalProperties = [
			modelDocs: "false"
	]
	configOptions = [
			interfaceOnly        : "true",
			useSpringBoot3       : "true",
			dateLibrary          : "java8",
			library              : "spring-boot",
			documentationProvider: "springdoc"
	]
}

compileJava.dependsOn tasks.named("openApiGenerate")

openApiMeta {
	generatorName = "Sample"
	packageName = "${project.group}"
	outputFolder = "$rootDir/build/meta".toString()
}

openApiValidate {
	inputSpec = "$rootDir/openapi.yaml".toString()
	recommend = true
}
